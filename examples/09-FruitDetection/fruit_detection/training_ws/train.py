# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES.
# SPDX-License-Identifier: BSD-3-Clause
#
# Copyright (c) 2022-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
#     2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
#     3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


# Permalink to original code:
# https://github.com/NVIDIA-Omniverse/synthetic-data-examples/blob/78622588948e055e27aa8b0ef8494a73855bceeb/end-to-end-workflows/object_detection_fruit/training/code/train.py  # noqa
# Changes:
#   - Modified the amount of labels
#   - Made static_labels part of the dataset class
#   - Removed the epochs option from the args parser and moved it to a constant
#   - Moved some training values to constants
#   - Added some logging


# Copyright 2024 Ekumen, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Trains a fasterrcnn_resnet50_fpn model."""

import json
import numpy as np
from optparse import OptionParser
import os
from PIL import Image
import shutil
import torch
import torch.utils.data
from torch.utils.tensorboard import SummaryWriter
from torchvision import transforms as T
from torchvision.models.detection.faster_rcnn import (
    FastRCNNPredictor,
    fasterrcnn_resnet50_fpn,
)


class FruitDataset(torch.utils.data.Dataset):
    """Dataset subclass for fruit data generated by Isaac."""

    def __init__(self, root, transforms):
        """
        Initialize a fruit dataset.

        :param root: path to data.
        :param transforms: transforms to apply to the images.
        """
        self.root = root
        self.transforms = transforms

        list_ = os.listdir(root)
        for file_ in list_:
            name, ext = os.path.splitext(file_)
            ext = ext[1:]
            if ext == "":
                continue

            if os.path.exists(root + "/" + ext):
                shutil.move(root + "/" + file_, root + "/" + ext + "/" + file_)

            else:
                os.makedirs(root + "/" + ext)
                shutil.move(root + "/" + file_, root + "/" + ext + "/" + file_)

        self.imgs = list(sorted(os.listdir(os.path.join(root, "png"))))
        self.label = list(sorted(os.listdir(os.path.join(root, "json"))))
        self.box = list(sorted(os.listdir(os.path.join(root, "npy"))))

        self.static_labels = {
            "background": 0,
            "apple": 1,
            "avocado": 2,
            "lime": 3,
        }
        self.num_classes = len(self.static_labels)

    def __getitem__(self, idx):
        """
        Fetch an item given an index.

        :param idx: index of the item to get.
        """
        img_path = os.path.join(self.root, "png", self.imgs[idx])
        img = Image.open(img_path).convert("RGB")

        label_path = os.path.join(self.root, "json", self.label[idx])

        with open(label_path, "r") as json_data:
            json_labels = json.load(json_data)

        box_path = os.path.join(self.root, "npy", self.box[idx])
        dat = np.load(str(box_path))

        boxes = []
        labels = []
        for i in dat:
            obj_val = i[0]
            xmin = torch.as_tensor(np.min(i[1]), dtype=torch.float32)
            xmax = torch.as_tensor(np.max(i[3]), dtype=torch.float32)
            ymin = torch.as_tensor(np.min(i[2]), dtype=torch.float32)
            ymax = torch.as_tensor(np.max(i[4]), dtype=torch.float32)
            if (ymax > ymin) & (xmax > xmin):
                boxes.append([xmin, ymin, xmax, ymax])
                area = (xmax - xmin) * (ymax - ymin)
            labels += [json_labels.get(str(obj_val)).get("class")]

        label_dict = {}
        labels_out = []

        for i in range(len(labels)):
            label_dict[i] = labels[i]

        for i in label_dict:
            fruit = label_dict[i]
            final_fruit_label = self.static_labels[fruit]
            labels_out += [final_fruit_label]

        target = {}
        target["boxes"] = torch.as_tensor(boxes, dtype=torch.float32)
        target["labels"] = torch.as_tensor(labels_out, dtype=torch.int64)
        target["image_id"] = torch.tensor([idx])
        target["area"] = area

        if self.transforms is not None:
            img = self.transforms(img)
        return img, target

    def __len__(self):
        """Return the size of the dataset."""
        return len(self.imgs)


def parse_input():
    """
    Parse command line options.

    Requires input data directory, output torch file, and number epochs used
    to train.
    """
    usage = "usage: train.py [options] arg1 arg2 "
    parser = OptionParser(usage)
    parser.add_option(
        "-d",
        "--data_dir",
        dest="data_dir",
        help="Directory location for Omniverse synthetic data.",
    )
    parser.add_option(
        "-o",
        "--output_file",
        dest="output_file",
        help="Save torch model to this file and location (extension: .pth)",
    )
    (options, args) = parser.parse_args()
    return options, args


def get_transform(train):
    """Return a PyTorch transform callable object."""
    transforms = []
    transforms.append(T.PILToTensor())
    transforms.append(T.ConvertImageDtype(torch.float))
    return T.Compose(transforms)


def collate_fn(batch):
    """Merge a sample batch."""
    return tuple(zip(*batch))


def create_model(num_classes):
    """
    Create a fasterrcnn_resnet50_fpn model.

    :param num_classes: number of classes in the dataset
        (including background).
    """
    model = fasterrcnn_resnet50_fpn(weights="DEFAULT")
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)
    return model


# Constants
NUM_EPOCHS = 5
TRAINING_PARTITION_RATIO = 0.7
OPTIMIZER_LR = 0.00001


def main():
    """Train a model."""
    writer = SummaryWriter()
    options, args = parse_input()
    dataset = FruitDataset(options.data_dir, get_transform(train=True))
    train_size = int(len(dataset) * TRAINING_PARTITION_RATIO)
    valid_size = len(dataset) - train_size

    train, valid = torch.utils.data.random_split(
        dataset,
        [train_size, valid_size],
    )
    train_loader = torch.utils.data.DataLoader(
        train, batch_size=1, shuffle=True, num_workers=0, collate_fn=collate_fn
    )
    valid_loader = torch.utils.data.DataLoader(
        valid, batch_size=1, shuffle=True, num_workers=0, collate_fn=collate_fn
    )

    device = None
    if torch.cuda.is_available():
        device = torch.device("cuda")
        print("Cuda is available.")
    else:
        device = torch.device("cpu")
        print("Cuda is not available, training with cpu.")

    model = create_model(dataset.num_classes)
    model.to(device)

    params = [p for p in model.parameters() if p.requires_grad]
    optimizer = torch.optim.SGD(params, lr=OPTIMIZER_LR)
    len_dataloader = len(train_loader)

    model.train()
    for epoch in range(NUM_EPOCHS):
        optimizer.zero_grad()

        i = 0
        for imgs, annotations in train_loader:
            i += 1
            imgs = list(img.to(device) for img in imgs)
            annotations = [
                {k: v.to(device) for k, v in t.items()} for t in annotations
            ]  # Format the annotations for model consumption
            loss_dict = model(imgs, annotations)
            losses = sum(loss for loss in loss_dict.values())
            writer.add_scalar("Loss/Train", losses, epoch)

            losses.backward()
            optimizer.step()

            print(f"Iteration: {i}/{len_dataloader}, Loss: {losses}")

        loss_sum = 0
        for imgs, annotations in valid_loader:
            imgs = list(img.to(device) for img in imgs)
            annotations = [
                {k: v.to(device) for k, v in t.items()} for t in annotations
            ]  # Format the annotations for model consumption
            loss_dict = model(imgs, annotations)
            losses = sum(loss for loss in loss_dict.values())
            loss_sum = loss_sum + losses.item()
        avg_loss = loss_sum / len(valid_loader)
        print(f"Epoch: {epoch}, Validation loss (average): {avg_loss}")
        writer.add_scalar("Loss/Validation", avg_loss, epoch)

    writer.close()
    torch.save(model.state_dict(), options.output_file)
    print(
        f"Training ended. Model state dictionary was saved to file: \
        {options.output_file}."
    )


if __name__ == "__main__":
    main()
