#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.9987732912948541, 0.9987732912948528, 0.9987733867971156)
                double3 target = (-3.9780357452556814e-8, -3.9780358340735233e-8, 7.956085590343775e-8)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/World/olive_camera/olive_camera"
        }
        dictionary metricsAssembler = {
            dictionary "/World/Apple" = {
            }
            dictionary "/World/Avocado01" = {
            }
            dictionary "/World/Lime01" = {
            }
            dictionary "/World/olive_camera" = {
            }
            dictionary "/World/olv_cam01" = {
            }
            dictionary "/World/olvive_camera_1" = {
            }
            int version = 1
        }
        dictionary omni_layer = {
            string authoring_layer = "./scene.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:ecoMode:enabled" = 1
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            double "rtx:translucency:worldEps" = 0.005
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

over "Render" (
    hide_in_stage_window = true
)
{
}

def Xform "World"
{
    def PhysicsScene "PhysicsScene" (
        prepend apiSchemas = ["PhysxSceneAPI"]
    )
    {
        vector3f physics:gravityDirection = (0, 0, -9.8)
        uniform token physxScene:broadphaseType = "MBP"
        bool physxScene:enableGPUDynamics = 0
        uniform uint physxScene:maxPositionIterationCount = 100
        uniform uint physxScene:maxVelocityIterationCount = 100
        uint physxScene:timeStepsPerSecond = 50
    }

    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    def "Apple" (
        prepend payload = @omniverse://localhost/NVIDIA/Assets/ArchVis/Residential/Food/Fruit/Apple.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:scale:unitsResolve = (0.015, 0.015, 0.015)
        double3 xformOp:translate = (-0.1, -0.05, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale", "xformOp:scale:unitsResolve"]
    }

    def "Avocado01" (
        prepend payload = @omniverse://localhost/NVIDIA/Assets/ArchVis/Residential/Food/Fruit/Avocado01.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:scale:unitsResolve = (0.015, 0.015, 0.015)
        double3 xformOp:translate = (0, 0.1, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale", "xformOp:scale:unitsResolve"]
    }

    def "Lime01" (
        prepend payload = @omniverse://localhost/NVIDIA/Assets/ArchVis/Residential/Food/Fruit/Lime01.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:scale:unitsResolve = (0.015, 0.015, 0.015)
        double3 xformOp:translate = (0.1, -0.05, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale", "xformOp:scale:unitsResolve"]
    }

    def Xform "olive_camera"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0.445)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Camera "olive_camera"
        {
            float2 clippingRange = (0.01, 10000000)
            float focalLength = 2.8
            float focusDistance = 5.0
            float fStop = 140
            float fthetaCx = 320
            float fthetaCy = 240
            float fthetaHeight = 480
            float fthetaMaxFov = 90
            float fthetaPolyB = 0
            float fthetaPolyD = 0
            float fthetaWidth = 640
            float horizontalAperture = 5.856
            custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -106433633670509.52)
            float p0 = 0
            float p1 = 0
            float s0 = 0
            float s1 = 0
            float s2 = 0
            float s3 = 0
            float verticalAperture = 3.276
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def OmniGraph "OliveCameraGraph"
        {
            token evaluationMode = "Automatic"
            token evaluator:type = "execution"
            token fabricCacheBacking = "Shared"
            int2 fileFormatVersion = (1, 9)
            token pipelineStage = "pipelineStageSimulation"

            def OmniGraphNode "OnPlaybackTick" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                token node:type = "omni.graph.action.OnPlaybackTick"
                int node:typeVersion = 2
                custom double outputs:deltaSeconds
                custom double outputs:frame
                custom uint outputs:tick (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom double outputs:time
                uniform float2 ui:nodegraph:node:pos = (-1484.2115, 317.15366)
            }

            def OmniGraphNode "CameraInfoPublish" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint64 inputs:context
                prepend uint64 inputs:context.connect = </World/olive_camera/OliveCameraGraph/Context.outputs:context>
                custom bool inputs:enabled
                custom bool inputs:enableSemanticLabels
                custom uint inputs:execIn (
                    customData = {
                        bool isExecution = 1
                    }
                )
                prepend uint inputs:execIn.connect = </World/olive_camera/OliveCameraGraph/OliveCameraGraph.outputs:execOut>
                custom string inputs:frameId = "olive_camera"
                custom uint inputs:frameSkipCount
                custom string inputs:nodeNamespace = ""
                custom string inputs:qosProfile
                custom uint64 inputs:queueSize
                custom token inputs:renderProductPath
                prepend token inputs:renderProductPath.connect = </World/olive_camera/OliveCameraGraph/OliveCameraGraph.outputs:renderProductPath>
                custom bool inputs:resetSimulationTimeOnStop = 1
                custom string inputs:semanticLabelsTopicName
                custom float2 inputs:stereoOffset
                custom string inputs:topicName = "camera_info"
                custom token inputs:type = "camera_info" (
                    allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                )
                custom bool inputs:useSystemTime
                custom token inputs:viewport
                token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
                int node:typeVersion = 2
                uniform float2 ui:nodegraph:node:pos = (-392.7624, -4.817154)
            }

            def OmniGraphNode "RunOnce" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint inputs:execIn (
                    customData = {
                        bool isExecution = 1
                    }
                )
                prepend uint inputs:execIn.connect = </World/olive_camera/OliveCameraGraph/OnPlaybackTick.outputs:tick>
                token node:type = "omni.isaac.core_nodes.OgnIsaacRunOneSimulationFrame"
                int node:typeVersion = 1
                custom uint outputs:step (
                    customData = {
                        bool isExecution = 1
                    }
                )
                uniform float2 ui:nodegraph:node:pos = (-1215.2048, 320.4414)
            }

            def OmniGraphNode "Context" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uchar inputs:domain_id
                custom bool inputs:useDomainIDEnvVar
                token node:type = "omni.isaac.ros2_bridge.ROS2Context"
                int node:typeVersion = 2
                custom uint64 outputs:context
                uniform float2 ui:nodegraph:node:pos = (-893.0942, 156.43187)
            }

            def OmniGraphNode "PublishImage" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom uint64 inputs:context
                prepend uint64 inputs:context.connect = </World/olive_camera/OliveCameraGraph/Context.outputs:context>
                custom bool inputs:enabled
                custom bool inputs:enableSemanticLabels
                custom uint inputs:execIn (
                    customData = {
                        bool isExecution = 1
                    }
                )
                prepend uint inputs:execIn.connect = </World/olive_camera/OliveCameraGraph/OliveCameraGraph.outputs:execOut>
                custom string inputs:frameId = "olive_camera"
                custom uint inputs:frameSkipCount
                custom string inputs:nodeNamespace
                custom string inputs:qosProfile
                custom uint64 inputs:queueSize
                custom token inputs:renderProductPath
                prepend token inputs:renderProductPath.connect = </World/olive_camera/OliveCameraGraph/OliveCameraGraph.outputs:renderProductPath>
                custom bool inputs:resetSimulationTimeOnStop
                custom string inputs:semanticLabelsTopicName
                custom float2 inputs:stereoOffset
                custom string inputs:topicName = "image_raw"
                custom token inputs:type (
                    allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                )
                custom bool inputs:useSystemTime
                custom token inputs:viewport
                token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
                int node:typeVersion = 2
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-392.87637, 445.42047)
            }

            def OmniGraphNode "OliveCameraGraph" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                custom rel inputs:cameraPrim = </World/olive_camera/olive_camera> (
                    customData = {
                        dictionary omni = {
                            dictionary graph = {
                                string relType = "target"
                            }
                        }
                    }
                )
                custom bool inputs:enabled
                custom uint inputs:execIn (
                    customData = {
                        bool isExecution = 1
                    }
                )
                prepend uint inputs:execIn.connect = </World/olive_camera/OliveCameraGraph/RunOnce.outputs:step>
                custom uint inputs:height = 480
                custom uint inputs:width = 640
                token node:type = "omni.isaac.core_nodes.IsaacCreateRenderProduct"
                int node:typeVersion = 2
                custom uint outputs:execOut (
                    customData = {
                        bool isExecution = 1
                    }
                )
                custom token outputs:renderProductPath
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-893.24945, 342.1555)
            }
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 2000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        token visibility = "inherited"
        quatd xformOp:orient = (0.7071068, 0.0, 0.0, 0.7071068)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}
